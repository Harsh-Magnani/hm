<!DOCTYPE html>
<html lang="en-us">
    <head>
    	<meta charset="utf-8">
    	<meta name="viewport" content="width=device-width">
    	<title>My 1st voice string</title>
    	<style>
            body {
                background: black;
                overflow: hidden;
                margin: 0px;
                color: white;
                font-family: sans-serif;
                text-align: center;
            }

            .slider {
              width: 90%;
              height: 10px;
              opacity: 0.7;
              transition: opacity .2s;
            }
            
            .slider:hover {
              opacity: 1;
            }
            
            .slider::-webkit-slider-thumb {
              appearance: none;
              width: 15px;
              height: 15px;
              border-radius: 10%;
              background: rgb(25, 125, 255);
              cursor: pointer;
            }
            
            #pitch {
                -webkit-appearance: none;
            }

        </style>
    </head>
    <body>
        <p class="start-message">Click to start your son's 1st app Khushi.</p>
    
    	<div class="app-contents">
            <button class="mute" data-muted="false">Mute</button>
            <div class="slidecontainer">
                <p>Pitch: <span id="pitchValue"></span></p>
                <input type="range" min="5" max="10000" value="500" class="slider" id="pitch">
                
                <p>Volume: <span id="volumeValue"></span>%</p>
                <input type="range" min="1" max="10000" value="100" class="slider" id="volume">
            </div>
            <br>
            <canvas class="canvas"></canvas>
    	</div>
    
        <script>
var appContents = document.querySelector('.app-contents');
var startMessage = document.querySelector('.start-message');
appContents.style.display = 'none';

window.addEventListener('click', init);

function init() {
    appContents.style.display = 'block';
    document.body.removeChild(startMessage);
    
    // create web audio api context
    var audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    
    // create Oscillator and gain node
    var oscillator = audioCtx.createOscillator();
    var gainNode = audioCtx.createGain();
    
    //sine, square, sawtooth, triangle
    var curWave = "triangle";
    oscillator.type = curWave;
    
    // connect oscillator to gain node to speakers
    oscillator.connect(gainNode);
    gainNode.connect(audioCtx.destination);
    
    // create initial theremin frequency and volumn values
    var WIDTH = window.innerWidth;
    var HEIGHT = window.innerHeight;
    
    var initialFreq = 3000;
    var initialVol = 0.001;
    
    // set options for the oscillator
    oscillator.detune.value = 100; // value in cents
    oscillator.start();
    
    oscillator.onended = function() {
        println('Your tone has now stopped playing!');
        oscillator.start();
    };
    
    gainNode.gain.value = initialVol;
    gainNode.gain.minValue = initialVol;
    gainNode.gain.maxValue = initialVol;
    
    //get slider data
    var pitch_slider = document.getElementById("pitch");
    var pitch_output = document.getElementById("pitchValue");
    pitch_output.innerHTML = pitch_slider.value;
    pitch_slider.oninput = function() {
        pitch_output.innerHTML = this.value;
    }
    
    var volume_slider = document.getElementById("volume");
    var volume_output = document.getElementById("volumeValue");
    volume_output.innerHTML = volume_slider.value;
    volume_slider.oninput = function() {
        volume_output.innerHTML = this.value;
    }
    
    setInterval(function(){
        updatePage();
    },10);
    
    function updateSound(e) {
        oscillator.frequency.value = pitch_slider.value;
        gainNode.gain.value = volume_slider.value/1000;
    }
    
    setInterval(function(){
        updateSound();
    },50);
    
    // mute button
    var mute = document.querySelector('.mute');
    
    mute.onclick = function() {
    if(mute.getAttribute('data-muted') === 'false') {
      gainNode.disconnect(audioCtx.destination);
      mute.setAttribute('data-muted', 'true');
      mute.innerHTML = "Unmute";
    } else {
      gainNode.connect(audioCtx.destination);
      mute.setAttribute('data-muted', 'false');
      mute.innerHTML = "Mute";
    };
    }
    
    // canvas visualization
    var canvas = document.querySelector('.canvas');
    canvas.width = WIDTH;
    canvas.height = 400;
    
    var ctx = canvas.getContext('2d');
    
    //MY PJS LIBRARY---------------------------------
    //{
    function random(number1, number2) {
        var randomNo = number1 + (Math.floor(Math.random() * (number2 - number1)) + 1);
        return randomNo;
    }
    function background(r, g, b){
        ctx.beginPath();
        ctx.fillStyle = 'rgb(' + r + ', ' + g + ', ' + b +')';
        ctx.rect(0, 0, canvas.width, canvas.height);
        ctx.fill();
        ctx.closePath();
    }
    function line(x1, y1, x2, y2){
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
        ctx.closePath();
    }
    function strokeWeight(value){
        ctx.lineWidth = value;
    }
    function stroke(r, g, b){
        ctx.strokeStyle = 'rgb(' + r + ', ' + g + ', ' + b +')';
    }
    function strokeCap(type){
        ctx.lineCap = type.toLowerCase();
    }
    function sin(value){
        return Math.sin(value);
    }
    //}------------------------------------------
    
    function wave(deg){
        var curDeg = deg % 360;
        if(curWave === "sawtooth"){
            return curDeg / 180 - 1;
        } else if(curWave === "square") {
            return curDeg < 180 ? 1 : -1;
        } else if(curWave === "triangle") {
            return (curDeg < 180 ? curDeg / 180 : 2 - curDeg / 180) * 2 - 1;
        } else if(curWave === "sine"){
            return sin(deg);
        }
    }
    function waveOutput(x) {
        return ((wave(880 * Math.PI * x) + wave(1100 * Math.PI * x) + wave(1320 * Math.PI * x)) * 25) + 100;
    }
    
    var waveX = 0;
    var inc = 0.011;
    var notes = [];
    function canvasDraw() {
        ctx.globalAlpha = 1;
        
        background(0, 0, 0);
        
        strokeCap("ROUND");
        strokeWeight(2);
        stroke(0, 255, 0);
        // for(var x = 0; x < 1; x += inc){
        //     line(x * 600, waveOutput(x + waveX), (x + inc) * 600, waveOutput(x + waveX + inc));
        // }
        // waveX += inc;
        
        notes.push(pitch_slider.value/7*(volume_slider.value/100));
        if(notes.length >= 40){
            notes.splice(0, 1);
        }
        
        strokeWeight(10);
        strokeCap("SQUARE");
        for(var i = 0; i < 40; i++){
            line(i*16, 300-notes[i]/2, i*16, 300+notes[i]/2);
        }
    }
    
    setInterval(function(){
        canvasDraw();
    },20);

    var body = document.querySelector('body');
}

    </script>

    </body>
</html>
